/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package NativeTest;

import NativeTest.jni.*;
import org.graalvm.nativeimage.IsolateThread;
import org.graalvm.nativeimage.StackValue;
import org.graalvm.nativeimage.c.function.CEntryPoint;
import org.graalvm.nativeimage.c.type.CTypeConversion;

public final class NativeImpl {
    // JNI Name Mangling based on caller?
    @CEntryPoint(name = "Java_org_test_Native_createIsolate", builtin=CEntryPoint.Builtin.CREATE_ISOLATE)
    public static native IsolateThread createIsolate();

    @CEntryPoint(name = "Java_org_test_Native_add")
    public static int add(JNIEnvironment env, JClass clazz, @CEntryPoint.IsolateThreadContext long isolateId, int a, int b) {

        JNINativeInterface fn = env.getFunctions();

        try (
            CTypeConversion.CCharPointerHolder name = CTypeConversion.toCString("hello");
            CTypeConversion.CCharPointerHolder sig = CTypeConversion.toCString("(ZCBSIJFD)V");
        ) {
            JMethodID helloId = fn.getGetStaticMethodID().find(env, clazz, name.get(), sig.get());

            JValue args = StackValue.get(8, JValue.class);
            args.addressOf(0).z(false);
            args.addressOf(1).c('A');
            args.addressOf(2).b((byte)22);
            args.addressOf(3).s((short)33);
            args.addressOf(4).i(39);
            args.addressOf(5).j(Long.MAX_VALUE / 2l);
            args.addressOf(6).f((float) Math.PI);
            args.addressOf(7).d(Math.PI);
            fn.getCallStaticVoidMethodA().call(env, clazz, helloId, args);
        }


        System.out.println("HelloNative " + System.getProperty("java.version") + " " + System.getProperty("java.vm.name"));
        return a + b;
    }
/*
    public static void main(String[] args) {
        System.out.println("You called main!");
    }*/
}
